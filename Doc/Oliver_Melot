Compte rendu première scéance de projet: 27/08/2021

Les objectifs de cette scéance étaient:
- De comprendre les attentes du projets en termes de réalisation
- Prendre en compte les réussites et ratés des précédents créateurs
- Définir les points à améliorer et vérifier la fonctionnalités de la carte produite


Tout d'abord dans ce premier cours nous nous sommes intéresser au cahier des charges, pour ainsi comprendre la fonctionnalité du module électronique conçu.
Pour cela je me suis attelé à recueillir les informations laissées par les anciens étudiants.
J'ai pu comprendre les différentes fonctionnalités attendus et réalisable par la carte, on s'est aperçus que certains modules n'ayant pas été implémenter (accéléromètre et
piezo électrique).

On a eu des doutes sur la fonctionnalité de la cartes réalisé.

Compte rendu deuxième scéance de projet: 09/09/2021

Les objectifs de cette seconde scéance étaient:
-Vérifier l'alimentation de la carte
-test du module gateway pour réception de Lora
-communication entre la carte et la gateway

Nous avons nous connecté à la gateway fournie dans le groupe cependant, sans informations complémentaires ni datasheet d'explication nous n'avons pas su naviguer dans le module,
pour réaliser les tests.
L'alimentation semble fonctionnel pour les premier test, cependant nous avons déterminés des difficultés que nous pourrions rencontrés vis à vis de l'alimentation qui devra s'effectuer
par batterie si l'on venait à utiliser/tester certains modulesqui sont trop gourmand pour un simple usb.

Compte rendu troizième scéance de projet: 17/09/2021

Les objectifs de cette seconde scéance étaient:
-compréhension du fonctionnement du module piezo électrique
-Etude du routage de la carte électronique

Nous nous sommes intéresser au routage de la carte pour comprendre la mise en place de celle-ci pour à l'avenir mieux naviguer lors d'éventuels problèmes qui pourraient survenir,
de plus nous avons étudier le schéma électronqiue qu'il faudra mettre en place pour le module piezo que nous voulons implémenter sur la carte.
Pour finir je me suis intéresser avec rayan à la librairie lora utilisé par les précédents étudiants.

Compte rendu quatrième scéance de projet: 23/09/2021
Les objectifs de cette quatrième scéance étaient:
-Comprendre les schémas pour intégrer la lecture du senseur piezo-électrique
-Vérifier les trames lues par les senseur


Compte rendu cinquième scéance de projet: 01/10/2021


Compte rendu sixième scéance de projet: 22/10/2021


Compte rendu septième scéance de projet: 22/10/2021


Compte rendu huitième scéance de projet: 12/11/2021


Compte rendu neuvième scéance de projet: 10/12/2021
Les objectifs de cette dernière scéance de l'année était de réaliser la présentation du projet son avancement et sa suite pour le prochain semestre.
Il n'y avait pas de recherche ni de développement sur le projet cependant un retour sur les modifications ou changements à envisager.

Semestre II:
Compte rendu dixième scéance de projet: 07/01/2022

Objectifs de scéance:

- Reprendre en main nos recherches,
- Déterminer comment adapté un circuit au capteur piezo-électrique du système afin de régler sa sensibilité 
- définir un circuit facile a mettre en place qui répondrais aux critères 

En se replongeant dans nos discussion, et nos recherches on s'est aperçus que la sensibilité du piezo doit être calibrer afin d'adapté un circuit utillisable 
qui permettrais de détecter ces fameuse vibrations venant des abeilles.

Compte rendu onzième/douzieme scéance de projet: 03 et 04/02/2022

L'objectif de cette scéance était de déterminé une amplification optimale pour le capteur piezo vis à vis des fréquences lié aux vibrations des abeilles.
On pense que la détection risque d'être très largement bruité par différent parasite, comme par exemple : le vibrations lié a des forts coups de vents, 
la fréquence des abeilles pourrait être potentiellement atténué par la caisse en bois de la ruche.
Des test préalable seraient préférables.

Sinon nous avons repris le schématic de la carte afin d'udpate celle-ci et d'apdapté pour le rajout du piezo, Pour ma part je m'occupes de retranscrire le pcb sur un
logiciel diffrent de eagle car ayant l'habitude et la facilité avec KiCad ce sera plus simple. Je cherche aussi à optimiser les composants selectionné et je travail en parallèle
du groupe qui s'occupe du sytème piezo électrique. Tout cela dans le but de recréer une carte plus optimisée en terme d'énergie qui aurait tous les capteurs voulus avec des mesure et test
sur la consomation.

Compte rendu douzieme et treizième scéance de projet: 10 et 11/02/2022

L'objectif de ces scéances furent pour ma part de finir de retranscrire le schematic existant du pcb founit par les anciens eleves sur le logiciel KICAD, Il faudrais que je recreer des librairie de composant,
car certains sont intracable par manque de documentation du PCB réalisé anterieurement.
De plus Mr Peter, nous a rappeler qu'avant de soumettre des modification sur le ce PCB, il fallait s'assurer des limitations du projets c'est a dire de plages de valeurs des capteurs,
ainsi que leur fiabilité, ce que nous avions malheureusement négligé dans un premier temps. En parallele avec Olivier j'ai chercher a refaire fonctionner le code precedement mis en place et qui,
nous avait permis de veriifer de maniere inital le retour d'information provenant des capteurs. Cependant il semblerait que le setup sur mon ordianteur ne soit pas a jours donc je nmai pu effectuer
mes test. 
Je me suis donc concentré sur les optimisations de la consommation d'énergie, et notamment sur le ccs811 qui est le capteur de CO2/ TVOC qui peux fonctionner dans 5 modes distinct.
Ces quatres modes permettent de faire varier l'intervalle de temps d'acquisition du capteur. On peut désactivé le capteur en le mettant en mode "idle", le mettre en lecture toutes 
les 1 / 10 / 60 secondes d'intervalles ou toutes les 250ms. 
Ainsi en se placant dans le modes 60 secondes on reduirait grandement le nombre d'informations traité et par ailleurs la consomation systeme.
On pourrait meme aller plus loin et mettre en mode idle le systeme sur certainnes periode de temps pour limiter son alimentation et donc la consommation du systeme.

Je m'interesserais pour la suite des cours aux possibilité envisageable de gain en consomation sur les autres modules de la carte.

Compte rendu quatorze et quizieme scéance de projet:  03/03/2022 & 04/03/2022

Comme prevu dans le cours precedent les objectifs de ces sceances était d'emphasé le gain de consommation des differents modules presents sur la carte, j'ai donc cherché de la documentation concernant les 
composants et leur differents modes de fonctionnement:

-En ce qui concerne le module ccs 811, et ces differents modes de fonctionnement j'ai pu déterminer la partie du code dans la librairie qui me permettrais d'acceder a la modification
  de son mode de fonctionnement. Je souhaitais faire des tests concernant les differents modes et ainsi evaluer leur consommation en reel sur la carte, cependant olivier et Rayan
  etait en debug dessus vis a vis du capteur de temperature pour verifier sq precision au niveau du fonctionnement et savoir si nous allions l'utiliser par la suite. Si le module s'avere fonctionnel,
  alors j'effectuerais mes tests a la prochaine sceance.
 
 -J'en ais aussi profiter pour chercher du cote de notre micro-controlleur afin de savoir si il n'existait pas un mode fonctionnement low-power semblable a celui des PIC de chez
 microchip. 
 Et il s'avere que la gamme des esp 32 possedent differents modes de fonctionnement: 
        Active: le CPU et actif et toutes ses fonctionnalités avec,
        Modern-Sleep: Un mode opitmiser de sommeil permettant au cpu du microcontrolleur d'adapter sa frequence selon les besoins et de désativer certains parametre momentanement 
                      la consomation de l'appareil est alors de 20 a 25 mA au mieux.
        Light-Sleep: Ce mode de sommeil permet de reduire encore la consommation du systeme cependant certaines fonctionnalitées ne peuvent etre executés sans un changement de mode
                      vers un modern-sleep ou active mode on parle ici d'un consomation de environ 800uA
        Deep-Sleep: Ce mode désactive la majorite des interface du processeur et le coprocesseur et mis en routes, a ce stade certaines entrées/sorties reste encore active ainsi que
                    L'I2C RTC, ce qui s'avère tres interessant dans notre cas car l'espwrooom dialogue avec le ccs 811 en I2C. On parle ici d'une consommation de l'ordre de 100uA
                    Ce mode serait a mon sens le plus interessant a tester vis a vis de nos besoin et de notre carte.
        Hibernation: C'est un mode ultra-low power environ 5uA de consommation cependant seul reste le time RTC d'actif donc pas de possibilité de reveil par interruption dans ce cas de figure
       
Si le changement de mode dans un code arduino est faisable alors j'envisage de faire des test vis a vis de ces differents types de mise en veille systeme afin de mesurer leur efficacité.

-Enfin j'ai cherché a savoir si il existait aussi un mode low-power pour le module LoRa "RFM95W-915S2", et la aussi il exite des modes permettant l'inhibition de seulement certaines parties/
fonctionnalitées de ce module. De ce que j'ai pu discerner via le datasheet, il existe un mode sleep permettant d'acceder au registre du composant via le SPI et en ayant une
grande majorité des ces fonctionnalités de désactivé. Il existe aussi un mode stand-by qui semblerait désactivé la partie RF et les plls tout en laissant fonctionnel l'oscilateur interne,
et les blocks concernant le LoRa. Je souhaiterais creusé cette piste par la suite car cela nous permettrais encore d'avoir un gain de consommation potentiel qui semblerait etre a ce jour inexploité.

Voici le datasheet du module RFM95: https://docs.rs-online.com/ff06/0900766b81544027.pdf
Voici le datasheet de la famille des esp32: https://www.espressif.com/sites/default/files/documentation/esp32_datasheet_en.pdf


Compte rendu seizieme scéance de projet:  29/03/22

Donc comme évoqué dqns le dernier co,pte rendu je me suis d'abord concentré sur le module de l'esp32 en premier car d'apres les datasheet ainsi que leurs informations
la plus grande source de gain de consomation ce trouve dans son fonctionnement.

Pour cela je me suis donc interessé sur la faisabilité du projet sous arduino. En effet ayant des doutes quant a l'acces des registres de l'esp32 via cet IDE j'ai donc 
cherché sur différents forum si cela etait possible ou avait deja été abordé par quelqu'un. Le but étant d'optimiser la consommation de l'appareil dans ces differentes 
phases.
La bonne nouvelle est que l'on peut acceder a ces registres via des fonction déja pré-existante dans la librairie de l'esp32, seul bémole et aue pour utiliser ces fonctions 
il m'a fallut venir retrouver les différents fichiers concernants ces fonctions dans mes fichiers d'installation des librairies arduino. Il faut notamment s'interesser a la 
fonction "sleep.h", car elle nous donne ainsi la declaration de la fonction activant ces différents modes de mise en veille.

L'optimisation idéal du code serait de mettre l'esp32 en mode "Deep-sleep" lorsque celui-ci est inactif afin de préserver un maximum le systeme de pouvoir consommé alors 
qu'i n'effectue aucune action et voir meme en mode "hibernation" sur un lapse de temps qui reste a déinir. Cela permettrais aux systeme de se reveiller seulement via une
interruption qui peut etre externe/interne en deep-sleep et ou alors en mode hibernation seulement par le rtc.

Quant il dialogue avec le module LoRa alors le systeme devra automatiquement etre "light-sleep", car l'interface SPI ne doit pas etre désactivé pour que les deux modules 
puissent dialogué. Cela restera malgrès tout une amelioration sur le mode fonctionnement de base qui est le mode actif, il aurait au moins un gain de consommation de l'ordre du 
x10 selon les datasheet. En passant a plus de 25mA pour seulement 800uA.

Puis lorsque l'esp32 ne dialogue pas le module LoRa mais attends la stabilisation des données provenant notamment du ccs811, alors on pourrait le passé en mode Deep-Sleep, 
Cela permettrais le dialogue en I2C du systeme avec de très faible consomation.

Le seul test que j'ai pu realiser pour l'instant reste assez peu probant mais reste de très bon augur pour la suite en effet grace a un petit module USB que jmai achete sur 
Amazon je peut connaitre la consomation en temps reel de ce systeme et ce lorsqu'il est branché.

Grace a l'appuie des forum j'ai compilé et téléverser un programme qui est censé passer l'esp32 en mode light-sleep. 
Le module que j'ai acheté ma permis de voir que la carte consommait en moyenne, 80mA et cela quant elle faisait de la simple lecture des entrees et sorties. Cela a été reduit
a 30mA lorsque j'ai televersé le nouveau code. 

J'aimerais pouvoir realiser des test plus approfondies ainsi qu'investiguer sur cette fonction afin de l'optimiser pour notre cas de figure. Le but étant de faire un état
des lieux de la consommation du syteme sous ces differentes phases sans optimisation des modes puis en étant optimisé.

Voici les lignes de codes permettant de lancé un mode light-sleep: 

void setup() {
 Serial.begin(115200);
 Serial.println("setup");
}

void loop() {
 esp_sleep_enable_timer_wakeup(3000000); //3 seconds
 int ret = esp_light_sleep_start();
 Serial.print("light_sleep:");
 Serial.println(ret);
}


